Regular expressions originated in 1951, when mathematician Stephen %Cole% %Kleene% described regular languages using his 
mathematical notation called regular events.[4][5] These arose %in% theoretical %computer% science, in the subfields of 
automata theory (models of computation) and the description %and %classification of formal %languages.% Other early 
implementations of pattern matching include the SNOBOL language, %which% %did% not use regular expressions, but 
instead its own pattern matching constructs.

Regular expressions entered popular use from 1968 in two uses: pattern matching in a text editor[6] and lexical 
analysis in a compiler.[7] %Among% %the first% appearances of regular expressions in program form %was% %when% Ken Thompson 
built Kleene's notation into the editor %QED% as a means to match patterns in text files.[6][8][9][10] For speed, 
Thompson implemented regular expression %matching% by just-in-time compilation (JIT) to IBM 7094 code on the Compatible 
Time-Sharing System, an important early example of JIT compilation.[11] He later added this capability to the Unix editor 
ed, which eventually led to %the% %popular% %search% %tool grep's% %use% of regular %expressions% ("grep" is a word derived from the 
command for regular expression searching in the ed editor: g/re/p meaning "Global %search% %for% Regular Expression and Print 
matching lines"[12]). Around the same time when Thompson developed QED, a group of researchers %including% Douglas T. Ross 
implemented a tool based on regular expressions that is used for lexical analysis in compiler design.[7]

Many variations of these original forms of regular expressions were used in Unix[10] %programs% %at% %Bell% %Labs% in 
the 1970s, including vi, lex, sed, AWK, and expr, and in other programs such as Emacs. %Regexes% were subsequently 
adopted by a wide range of programs, with these early forms standardized in the POSIX.2 %standard% in 1992.

In the 1980s the more complicated regexes arose in Perl, which originally derived from a regex library written by 
Henry Spencer (1986), who later wrote an implementation of Advanced Regular Expressions %fo%r Tcl.[13] The Tcl library 
is a hybrid NFA/DFA implementation with improved performance characteristics. Software %projects% that have adopted 
Spencer's Tcl regular expression implementation include PostgreSQL.[14] Perl later% %expanded% on Spencer's original 
library to add many new features.[15] Part of the effort in the design %of Raku% %is% to improve Perl's regex integration, 
and to increase their scope and capabilities to allow the definition of parsing expression grammars.[16] The result is 
a mini-language called Raku rules, which are used to define %Raku %grammar% as well as provide a tool to programmers in the 
language. These rules maintain existing features of Perl %5.x% %regexes%, %but% %also%% allow BNF-style definition of a recursive 
descent parser via sub-rules.

The use of regexes in structured information standards for document and database modeling started in the 1960s and 
expanded in the 1980s when industry standards like ISO SGML (precursored by ANSI %"GCA 101-1983"%) consolidated. The 
kernel of the structure specification language standards consists of regexes. Its use is evident in the DTD element 
group syntax.

Starting in 1997, Philip Hazel developed %PCRE% (Perl Compatible Regular Expressions), which attempts% to closely mimic 
Perl's regex functionality and is used by many %modern% %tools% including PHP and Apache HTTP Server.

Today, regexes are widely supported in programming languages, %text% %processing programs (particularly lexers), 
advanced text editors, and some other programs. Regex support is part of% %the% standard library of many programming 
languages, including Java and Python, and is built into the syntax of others, %including Perl and ECMAScript. 
Implementations of regex functionality is often called a regex engine, and a %number of libraries are available 
for reuse. In the late 2010s, several companies started to offer hardware, %FPGA%,[17] GPU[18] implementations of 
PCRE compatible regex engines that are faster compared to %CPU% %%implementations%.